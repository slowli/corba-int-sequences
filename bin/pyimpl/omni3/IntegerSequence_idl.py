# Python stubs generated by omniidl from ../IntegerSequence.idl

import omniORB, _omnipy
from omniORB import CORBA, PortableServer
_0_CORBA = CORBA

_omnipy.checkVersion(3,0, __file__)


#
# Start of module "demo"
#
__name__ = "demo"
_0_demo = omniORB.openModule("demo", r"../IntegerSequence.idl")
_0_demo__POA = omniORB.openModule("demo__POA", r"../IntegerSequence.idl")

_0_demo.MAX_QUERY_SIZE = 100

# enum ResponseType
_0_demo.t_int = omniORB.EnumItem("t_int", 0)
_0_demo.t_string = omniORB.EnumItem("t_string", 1)
_0_demo.t_error = omniORB.EnumItem("t_error", 2)
_0_demo.ResponseType = omniORB.Enum("IDL:demo/ResponseType:1.0", (_0_demo.t_int, _0_demo.t_string, _0_demo.t_error,))

_0_demo._d_ResponseType  = (omniORB.tcInternal.tv_enum, _0_demo.ResponseType._NP_RepositoryId, "ResponseType", _0_demo.ResponseType._items)
_0_demo._tc_ResponseType = omniORB.tcInternal.createTypeCode(_0_demo._d_ResponseType)
omniORB.registerType(_0_demo.ResponseType._NP_RepositoryId, _0_demo._d_ResponseType, _0_demo._tc_ResponseType)

# union Response
_0_demo.Response = omniORB.newEmptyClass()
class Response (omniORB.Union):
    _NP_RepositoryId = "IDL:demo/Response:1.0"

_0_demo.Response = Response

Response._m_to_d = {"intVal": _0_demo.t_int, "stringVal": _0_demo.t_string, "message": _0_demo.t_error}
Response._d_to_m = {_0_demo.t_int: "intVal", _0_demo.t_string: "stringVal", _0_demo.t_error: "message"}
Response._def_m  = None
Response._def_d  = None

_0_demo._m_Response  = ((_0_demo.t_int, "intVal", omniORB.tcInternal.tv_long), (_0_demo.t_string, "stringVal", (omniORB.tcInternal.tv_string,0)), (_0_demo.t_error, "message", (omniORB.tcInternal.tv_string,0)),)
_0_demo._d_Response  = (omniORB.tcInternal.tv_union, Response, Response._NP_RepositoryId, "Response", omniORB.typeMapping["IDL:demo/ResponseType:1.0"], -1, _0_demo._m_Response, None, {_0_demo.t_int: _0_demo._m_Response[0], _0_demo.t_string: _0_demo._m_Response[1], _0_demo.t_error: _0_demo._m_Response[2]})
_0_demo._tc_Response = omniORB.tcInternal.createTypeCode(_0_demo._d_Response)
omniORB.registerType(Response._NP_RepositoryId, _0_demo._d_Response, _0_demo._tc_Response)
del Response

# typedef ... IndexList
class IndexList:
    _NP_RepositoryId = "IDL:demo/IndexList:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_demo.IndexList = IndexList
_0_demo._d_IndexList  = (omniORB.tcInternal.tv_sequence, omniORB.tcInternal.tv_long, 100)
_0_demo._ad_IndexList = (omniORB.tcInternal.tv_alias, IndexList._NP_RepositoryId, "IndexList", (omniORB.tcInternal.tv_sequence, omniORB.tcInternal.tv_long, 100))
_0_demo._tc_IndexList = omniORB.tcInternal.createTypeCode(_0_demo._ad_IndexList)
omniORB.registerType(IndexList._NP_RepositoryId, _0_demo._ad_IndexList, _0_demo._tc_IndexList)
del IndexList

# typedef ... ResponseList
class ResponseList:
    _NP_RepositoryId = "IDL:demo/ResponseList:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_demo.ResponseList = ResponseList
_0_demo._d_ResponseList  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:demo/Response:1.0"], 100)
_0_demo._ad_ResponseList = (omniORB.tcInternal.tv_alias, ResponseList._NP_RepositoryId, "ResponseList", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:demo/Response:1.0"], 100))
_0_demo._tc_ResponseList = omniORB.tcInternal.createTypeCode(_0_demo._ad_ResponseList)
omniORB.registerType(ResponseList._NP_RepositoryId, _0_demo._ad_ResponseList, _0_demo._tc_ResponseList)
del ResponseList

# interface IntegerSequence
_0_demo._d_IntegerSequence = (omniORB.tcInternal.tv_objref, "IDL:demo/IntegerSequence:1.0", "IntegerSequence")
omniORB.typeMapping["IDL:demo/IntegerSequence:1.0"] = _0_demo._d_IntegerSequence
_0_demo.IntegerSequence = omniORB.newEmptyClass()
class IntegerSequence :
    _NP_RepositoryId = _0_demo._d_IntegerSequence[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_demo.IntegerSequence = IntegerSequence
_0_demo._tc_IntegerSequence = omniORB.tcInternal.createTypeCode(_0_demo._d_IntegerSequence)
omniORB.registerType(IntegerSequence._NP_RepositoryId, _0_demo._d_IntegerSequence, _0_demo._tc_IntegerSequence)

# IntegerSequence operations and attributes
IntegerSequence._d__get_name = ((),((omniORB.tcInternal.tv_string,0),),None)
IntegerSequence._d__get_description = ((),((omniORB.tcInternal.tv_string,0),),None)
IntegerSequence._d__get_maxIndex = ((),(omniORB.tcInternal.tv_long,),None)
IntegerSequence._d_number = ((omniORB.tcInternal.tv_long, ), (omniORB.typeMapping["IDL:demo/Response:1.0"], ), None)
IntegerSequence._d_numbers = ((omniORB.typeMapping["IDL:demo/IndexList:1.0"], ), (omniORB.typeMapping["IDL:demo/ResponseList:1.0"], ), None)

# IntegerSequence object reference
class _objref_IntegerSequence (CORBA.Object):
    _NP_RepositoryId = IntegerSequence._NP_RepositoryId

    def __init__(self):
        CORBA.Object.__init__(self)

    def _get_name(self, *args):
        return _omnipy.invoke(self, "_get_name", _0_demo.IntegerSequence._d__get_name, args)

    def _get_description(self, *args):
        return _omnipy.invoke(self, "_get_description", _0_demo.IntegerSequence._d__get_description, args)

    def _get_maxIndex(self, *args):
        return _omnipy.invoke(self, "_get_maxIndex", _0_demo.IntegerSequence._d__get_maxIndex, args)

    def number(self, *args):
        return _omnipy.invoke(self, "number", _0_demo.IntegerSequence._d_number, args)

    def numbers(self, *args):
        return _omnipy.invoke(self, "numbers", _0_demo.IntegerSequence._d_numbers, args)

    __methods__ = ["_get_name", "_get_description", "_get_maxIndex", "number", "numbers"] + CORBA.Object.__methods__

omniORB.registerObjref(IntegerSequence._NP_RepositoryId, _objref_IntegerSequence)
_0_demo._objref_IntegerSequence = _objref_IntegerSequence
del IntegerSequence, _objref_IntegerSequence

# IntegerSequence skeleton
__name__ = "demo__POA"
class IntegerSequence (PortableServer.Servant):
    _NP_RepositoryId = _0_demo.IntegerSequence._NP_RepositoryId


    _omni_op_d = {"_get_name": _0_demo.IntegerSequence._d__get_name, "_get_description": _0_demo.IntegerSequence._d__get_description, "_get_maxIndex": _0_demo.IntegerSequence._d__get_maxIndex, "number": _0_demo.IntegerSequence._d_number, "numbers": _0_demo.IntegerSequence._d_numbers}

IntegerSequence._omni_skeleton = IntegerSequence
_0_demo__POA.IntegerSequence = IntegerSequence
omniORB.registerSkeleton(IntegerSequence._NP_RepositoryId, IntegerSequence)
del IntegerSequence
__name__ = "demo"

#
# End of module "demo"
#
__name__ = "pyimpl.omni3.IntegerSequence_idl"

_exported_modules = ( "demo", )

# The end.
